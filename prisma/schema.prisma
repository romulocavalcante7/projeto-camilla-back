generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  password        String
  role            Role              @default(USER)
  isEmailVerified Boolean           @default(false)
  firstAccess     Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tokens          Token[]
  avatar          Attachment?
  orders          Order[]
  favorites       FavoriteSticker[]
  stickers        Sticker[]
  status          Boolean           @default(true)
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Attachment {
  id                  String               @id @default(uuid())
  filename            String
  filetype            String
  filesize            Int
  url                 String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?              @unique
  stickers            Sticker[]
  categories          CategoryAttachment[]
  subniches           SubnicheAttachment[]
  stickerTranslations StickerTranslation[]
  subnicheAttachment  Subniche?
  categoryAttachment  Category?
  tutorial            Tutorial[]
}

model CategoryAttachment {
  id           String     @id @default(uuid())
  categoryId   String
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId String     @unique
}

model SubnicheAttachment {
  id           String     @id @default(uuid())
  subnicheId   String
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId String     @unique
}

model Sticker {
  id           String   @id @default(uuid())
  name         String?
  attachmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  categoryId   String
  subnicheId   String?
  userId       String?

  attachment      Attachment           @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  category        Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subniche        Subniche?            @relation(fields: [subnicheId], references: [id], onDelete: Cascade)
  user            User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  FavoriteSticker FavoriteSticker[]
  translations    StickerTranslation[]
}

model StickerTranslation {
  id           String      @id @default(uuid())
  stickerId    String
  language     Language
  name         String?
  attachmentId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  sticker      Sticker     @relation(fields: [stickerId], references: [id], onDelete: Cascade)
  attachment   Attachment? @relation(fields: [attachmentId], references: [id], onDelete: SetNull) // Relação opcional com Attachment

  @@unique([stickerId, language])
}

model Category {
  id           String                @id @default(uuid())
  name         String
  isImportant  Boolean               @default(false)
  displayOrder Int?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  stickers     Sticker[]
  subniches    Subniche[]
  translations CategoryTranslation[]
  attachment   Attachment?           @relation(fields: [attachmentId], references: [id])
  attachmentId String?               @unique
}

model CategoryTranslation {
  id         String   @id @default(uuid())
  categoryId String
  language   Language
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
}

model Subniche {
  id           String                @id @default(uuid())
  name         String
  isImportant  Boolean               @default(false)
  displayOrder Int?
  categoryId   String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  stickers     Sticker[]
  category     Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations SubnicheTranslation[]
  attachment   Attachment?           @relation(fields: [attachmentId], references: [id]) // Campo adicionado para relação com Attachment
  attachmentId String?               @unique
}

model SubnicheTranslation {
  id         String   @id @default(uuid())
  subnicheId String
  language   Language
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subniche   Subniche @relation(fields: [subnicheId], references: [id], onDelete: Cascade)

  @@unique([subnicheId, language])
}

model FavoriteSticker {
  id        String   @id @default(uuid())
  userId    String
  stickerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sticker   Sticker  @relation(fields: [stickerId], references: [id], onDelete: Cascade)

  @@unique([userId, stickerId])
}

model Tutorial {
  id           String      @id @default(uuid())
  name         String
  youtubeLink  String
  attachmentId String?
  isImportant  Boolean     @default(false)
  displayOrder Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
}

model Order {
  id                  String    @id @default(uuid())
  orderRef            String
  orderStatus         String
  productType         String
  paymentMethod       String
  storeId             String
  paymentMerchantId   String
  installments        Int
  cardType            String?
  cardLast4Digits     String?
  cardRejectionReason String?
  boletoURL           String?
  boletoBarcode       String?
  boletoExpiryDate    DateTime?
  pixCode             String?
  pixExpiration       DateTime?
  saleType            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  approvedDate        DateTime?
  refundedAt          DateTime?
  webhookEventType    String
  productId           String
  customerId          String?
  commissionId        String
  subscriptionId      String?
  accessURL           String?
  userId              String

  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer     Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  commission   Commission    @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id        String   @id @default(uuid())
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  firstName String
  mobile    String
  cpf       String
  ip        String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commission {
  id                   String              @id @default(uuid())
  chargeAmount         Int
  productBasePrice     Int
  kiwifyFee            Int
  currency             String
  myCommission         Int
  fundsStatus          String?
  estimatedDepositDate DateTime?
  depositDate          DateTime?
  commissionedStores   CommissionedStore[]
  orders               Order[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model CommissionedStore {
  id           String     @id @default(uuid())
  type         String
  customName   String
  email        String
  value        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  commissionId String
  commission   Commission @relation(fields: [commissionId], references: [id], onDelete: Cascade)
}

model Subscription {
  id          String   @id @default(uuid())
  startDate   DateTime
  nextPayment DateTime
  status      String
  planId      String
  charges     Charge[]
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  frequency     String
  qtyCharges    Int
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Charge {
  id              String       @id @default(uuid())
  orderId         String
  amount          Int
  status          String
  installments    Int
  cardType        String
  cardLastDigits  String
  cardFirstDigits String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Role {
  USER
  ADMIN
}

enum Language {
  EN
  PT
  ES
}
