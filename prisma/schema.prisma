// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  password        String
  role            Role              @default(USER)
  isEmailVerified Boolean           @default(false)
  firstAccess     Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tokens          Token[]
  avatar          Attachment?
  orders          Order[]
  favorites       FavoriteSticker[]
  Sticker         Sticker[]
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Attachment {
  id                 String                  @id @default(uuid())
  filename           String
  filetype           String
  filesize           Int
  url                String
  createdAt          DateTime                @default(now())
  user               User?                   @relation(fields: [userId], references: [id])
  userId             String?                 @unique
  stickers           Sticker[]
  translations       AttachmentTranslation[]
  StickerTranslation StickerTranslation[]
}

model AttachmentTranslation {
  id           String   @id @default(uuid())
  attachmentId String
  language     Language
  filename     String
  url          String

  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@unique([attachmentId, language])
}

model Sticker {
  id           String   @id @default(uuid())
  name         String
  attachmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  categoryId   String
  subnicheId   String?
  userId       String?

  attachment      Attachment           @relation(fields: [attachmentId], references: [id])
  category        Category             @relation(fields: [categoryId], references: [id])
  subniche        Subniche?            @relation(fields: [subnicheId], references: [id])
  user            User?                @relation(fields: [userId], references: [id])
  FavoriteSticker FavoriteSticker[]
  translations    StickerTranslation[]
}

model StickerTranslation {
  id           String   @id @default(uuid())
  stickerId    String
  language     Language
  name         String?
  attachmentId String

  sticker    Sticker    @relation(fields: [stickerId], references: [id])
  attachment Attachment @relation(fields: [attachmentId], references: [id])

  @@unique([stickerId, language])
}

model Category {
  id           String                @id @default(uuid())
  name         String
  createdAt    DateTime              @default(now())
  stickers     Sticker[]
  subniches    Subniche[]
  translations CategoryTranslation[]
}

model CategoryTranslation {
  id         String   @id @default(uuid())
  categoryId String
  language   Language
  name       String

  category Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, language])
}

model Subniche {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  createdAt  DateTime  @default(now())
  stickers   Sticker[]

  category     Category              @relation(fields: [categoryId], references: [id])
  translations SubnicheTranslation[]
}

model SubnicheTranslation {
  id         String   @id @default(uuid())
  subnicheId String
  language   Language
  name       String

  subniche Subniche @relation(fields: [subnicheId], references: [id])

  @@unique([subnicheId, language])
}

model FavoriteSticker {
  id        String @id @default(uuid())
  userId    String
  stickerId String

  user    User    @relation(fields: [userId], references: [id])
  sticker Sticker @relation(fields: [stickerId], references: [id])

  @@unique([userId, stickerId])
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Role {
  USER
  ADMIN
}

enum Language {
  EN
  PT
  ES
  // Adicione outros idiomas conforme necess√°rio
}

model Order {
  id                  String    @id @default(uuid())
  orderRef            String
  orderStatus         String
  productType         String
  paymentMethod       String
  storeId             String
  paymentMerchantId   String
  installments        Int
  cardType            String?
  cardLast4Digits     String?
  cardRejectionReason String?
  boletoURL           String?
  boletoBarcode       String?
  boletoExpiryDate    DateTime?
  pixCode             String?
  pixExpiration       DateTime?
  saleType            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  approvedDate        DateTime?
  refundedAt          DateTime?
  webhookEventType    String
  productId           String
  customerId          String?
  commissionId        String
  subscriptionId      String?
  accessURL           String?
  userId              String

  product      Product       @relation(fields: [productId], references: [id])
  customer     Customer?     @relation(fields: [customerId], references: [id])
  commission   Commission    @relation(fields: [commissionId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Product {
  id     String  @id @default(uuid())
  name   String
  orders Order[]
}

model Customer {
  id        String  @id @default(uuid())
  email     String  @unique
  fullName  String
  firstName String
  mobile    String
  cpf       String
  ip        String
  orders    Order[]
}

model Commission {
  id                   String              @id @default(uuid())
  chargeAmount         Int
  productBasePrice     Int
  kiwifyFee            Int
  currency             String
  myCommission         Int
  fundsStatus          String?
  estimatedDepositDate DateTime?
  depositDate          DateTime?
  commissionedStores   CommissionedStore[]
  orders               Order[]
}

model CommissionedStore {
  id           String     @id @default(uuid())
  type         String
  customName   String
  email        String
  value        Int
  commissionId String
  commission   Commission @relation(fields: [commissionId], references: [id])
}

model Subscription {
  id          String   @id @default(uuid())
  startDate   DateTime
  nextPayment DateTime
  status      String
  planId      String
  charges     Charge[]
  orders      Order[]

  plan Plan @relation(fields: [planId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  frequency     String
  qtyCharges    Int
  subscriptions Subscription[]
}

model Charge {
  id              String       @id @default(uuid())
  orderId         String
  amount          Int
  status          String
  installments    Int
  cardType        String
  cardLastDigits  String
  cardFirstDigits String
  createdAt       DateTime     @default(now())
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}
